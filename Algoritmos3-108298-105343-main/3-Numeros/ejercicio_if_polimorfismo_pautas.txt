
------------------ ALGORITMO DE REEMPLAZO DE IFS POR POLIMORFISMOS -----------------

1) Crear una jerarquía de clases con una clase por cada condición del if (si es que no existen).
2) Mover el cuerpo del if de cada condición a cada abstracción del paso 1) utilizando un mensaje polimórfico.
3) Nombrar el mensaje polimórfico.
4) Nombrar las abstracciones generadas en el paso 1.
5) Reemplazar el if por el envío del mensaje polimórfico.
6) Buscar el objeto polimórfico (si es necesario)

----------------------------- EJERCICIO DE NÚMEROS PARTE 1 -----------------------------

------- Método * ------ 

Original: 

* aMultiplier 

	(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
	
		[ ^self class with: value * aMultiplier integerValue ].
		
	(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
	
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].
		
	self error: 'Tipo de número no soportado'
	
Notamos que claramente tenemos un if:

		(type = #Entero and: [aMultiplier type = #Entero]) ifTrue:	
	
		[ ^self class with: value * aMultiplier integerValue ].

		(type = #Fraccion and: [aMultiplier type = #Fraccion]) ifTrue:
	
		[ ^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator) ].

Así que creamos una jerarquía de clases por cada condición del if:

Ahora tenemos:

			Numero
		   /	  \
		  A        B

Completando el paso 1)

Vamos por el paso 2), movemos el cuerpo del if de cada condición a cada abstracción del paso 1) utilizando un mensaje polimórfico

Nos queda en la subclase A:
	* aMultiplier
	^self class with: value * aMultiplier integerValue

Y en B:

	* aMultiplier
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator)

Al hacer el paso 2 completamos también el paso 3 porque en este caso el nombre del mensaje es obvio.

Ahora pasamos al 4, para nombrar las abstracciones. Es evidente que deberían llamarse Entero y Fraccion:

			Numero
		   /	  \
		Entero   Fraccion

Y finalmente estamos en condiciones de reemplazar el if:

En Numero nos queda: 

* aMultiplier 

	^self subclassResponsibility.
	
	"self error: 'Tipo de número no soportado'"

En Entero nos queda:

* aMultiplier
	^self class with: value * aMultiplier integerValue.

En Fraccion nos queda:

* aMultiplier
	^self class with: (numerator * aMultiplier numerator) over: (denominator * aMultiplier denominator).

Nota: Tuvimos también que cambiar los métodos with y with:over para que devuelvan Entero y Fraccion respectivamente
Nota2: No implementamos lo del error por ahora porque las pruebas las pasa de todas formas.
Nota3: No verifico la 2da condición del if (colaborador == entero) porque las pruebas las pasa igual.

Repetimos exactamente el mismo proceso con + y negated comenzando desde el paso 2 pues las abstracciones ya existen.
Y otra vez, repetimos lo mismo con cada categoría de mensajes.


